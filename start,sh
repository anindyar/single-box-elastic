#!/bin/sh
# Start script for start-local
# More information: https://github.com/elastic/start-local
set -eu

SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
cd "${SCRIPT_DIR}"
today=$(date +%s)
. ./.env

# Check disk space
available_gb=$(($(df -k / | awk 'NR==2 {print $4}') / 1024 / 1024))
required=$(echo "${ES_LOCAL_DISK_SPACE_REQUIRED}" | grep -Eo '[0-9]+')
if [ "$available_gb" -lt "$required" ]; then
  echo "----------------------------------------------------------------------------"
  echo "WARNING: Disk space is below the ${required} GB limit. Elasticsearch will be"
  echo "executed in read-only mode. Please free up disk space to resolve this issue."
  echo "----------------------------------------------------------------------------"
  echo "Press ENTER to confirm."
  read -r
fi

# Function to wait for Kibana to be ready
wait_for_kibana() {
  local timeout="${1:-60}"
  echo "- Waiting for Kibana to be ready"
  echo
  local start_time="$(date +%s)"
  until curl -s -I http://localhost:${KIBANA_LOCAL_PORT:-5601} | grep -q 'HTTP/1.1 302 Found'; do
    elapsed_time="$(($(date +%s) - start_time))"
    if [ "$elapsed_time" -ge "$timeout" ]; then
      echo "Error: Kibana timeout of ${timeout} sec"
      exit 1
    fi
    sleep 2
  done
}

# Function to generate Fleet enrollment token
generate_fleet_token() {
  local KIBANA_URL="http://localhost:${KIBANA_LOCAL_PORT:-5601}"
  local ELASTIC_USER="elastic"
  local ELASTIC_PASSWORD="${ES_LOCAL_PASSWORD}"

  # Wait for Kibana API to be accessible
  echo "- Waiting for Kibana API to be accessible..."
  until curl -s -o /dev/null -w "%{http_code}" "${KIBANA_URL}/api/status" | grep "200"; do
    sleep 5
  done

  echo "- Generating Fleet enrollment token..."
  local ENROLLMENT_RESPONSE=$(curl -s -X POST -u "${ELASTIC_USER}:${ELASTIC_PASSWORD}" \
    -H "Content-Type: application/json" \
    "${KIBANA_URL}/api/fleet/enrollment_tokens" \
    -d '{"description": "fleet-server-local"}')

  FLEET_ENROLLMENT_TOKEN=$(echo "$ENROLLMENT_RESPONSE" | jq -r '.item.enrollment_token')

  if [ -n "$FLEET_ENROLLMENT_TOKEN" ]; then
    echo "✅ Successfully generated Fleet enrollment token"
    echo "FLEET_ENROLLMENT_TOKEN=\"$FLEET_ENROLLMENT_TOKEN\"" >> .env # Persist for docker-compose
    echo "export FLEET_ENROLLMENT_TOKEN=\"$FLEET_ENROLLMENT_TOKEN\"" >> start.sh # Update start.sh with the token
    export FLEET_ENROLLMENT_TOKEN # Make available in the current script
  else
    echo "❌ Error generating Fleet enrollment token."
    exit 1
  fi
}

if [ -z "\${ES_LOCAL_LICENSE:-}" ] && [ "\$today" -gt $expire ]; then
  echo "---------------------------------------------------------------------"
  echo "The one-month trial period has expired. You can continue using the"
  echo "Free and open Basic license or request to extend the trial for"
  echo "another 30 days using this form:"
  echo "https://www.elastic.co/trialextension"
  echo "---------------------------------------------------------------------"
  echo "For more info about the license: https://www.elastic.co/subscriptions"
  echo
  echo "Updating the license..."
  $docker elasticsearch >/dev/null 2>&1
  result=\$(curl -s -X POST "\${ES_LOCAL_URL}/_license/start_basic?acknowledge=true" -H "Authorization: ApiKey \${ES_LOCAL_API_KEY}" -o /dev/null -w '%{http_code}\n')
  if [ "\$result" = "200" ]; then
    echo "✅ Basic license successfully installed"
    echo "ES_LOCAL_LICENSE=basic" >> .env
  else
    echo "Error: I cannot update the license"
    result=\$(curl -s -X GET "\${ES_LOCAL_URL}" -H "Authorization: ApiKey \${ES_LOCAL_API_KEY}" -o /dev/null -w '%{http_code}\n')
    if [ "\$result" != "200" ]; then
      echo "Elasticsearch is not running."
    fi
    exit 1
  fi
  echo
fi

$docker

if [ -n "${FLEET_SERVER_CONTAINER_NAME:-}" ]; then
  wait_for_kibana 120
  generate_fleet_token
fi
